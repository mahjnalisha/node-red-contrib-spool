module.exports = function(RED) {

    //spool node created
    function SpoolNode(n) {
        RED.nodes.createNode(this, n);

        SpoolNode.stat = '';
        var context = this.context();
        var node = this;
        var sqlite3 = require('sqlite3');

        //create database
        var db = new sqlite3.Database('./SpoolDB.db');

        //create table if it does not already exists
        db.run("CREATE TABLE if not exists spool_messages (id integer primary key autoincrement,message TEXT)");

        //executes while it receive the input from other nodes or database
        this.on('input', function ( msg) {
            var brokerStatus = "";

            context.stat = SpoolNode.stat || msg.status;


            if (SpoolNode.stat !== msg.status && msg.status != undefined) {
                context.stat = msg.status;
            }
            else{
                context.stat = SpoolNode.stat;
            }

            if (msg.status == undefined) {
                context.data = msg;

            }
            if (context.stat != undefined) {
                //use switch condition to check the online or offline status generated by various broker
                switch (context.stat.text) {
                    case "node-red:common.status.connected": {
                        brokerStatus = 'online';
                        SpoolNode.stat = context.stat;
                        break;
                    }
                    case "common.status.connected": {
                        brokerStatus = 'online';
                        SpoolNode.stat = context.stat;
                        break;

                    }
                    default: {
                        brokerStatus = "offline";
                        SpoolNode.stat = context.stat;

                        break;
                    }

                }
            } else {
                brokerStatus = 'offline';
                SpoolNode.stat = context.stat;


            }


            //check if broker is online and send messages to the broker both from database and serial devices
            if (brokerStatus == 'online') {

                select();
                //method with callback to execute retrieval and deletion of messages from the database after it is sent
                function select(callback) {

                    var query = "SELECT * from spool_messages ORDER BY id ASC LIMIT 1000 "; //retrieve n number of data in single call

                    db.all(query, function (err, rows) {

                        if (rows.length > 0) { // check if query returns any data
                            console.log("in rows data");
                            rows.forEach(function (row) {
                                if (err) {
                                    console.log("Error");
                                }
                                else {
                                   // console.log("this is message");
                                    console.log(row.id, row.message);
                                    context.data = ""; //reset context.data

                                    var message=JSON.parse(row.message);
                                    //console.log(message);
                                    var msg = {payload: message}; //set the message to payload
                                    console.log("send from database");
                                    node.send(msg); //send the message
                                    deleteMessage(row); //delete each row after sending the message
                                }
                            });
                            return callback()

                        }
                    });


                    function callback() {
                        //using timeout of 1 sec before executing next set of data
                        setTimeout(function () {
                            console.log("in callback");


                            select(callback);
                        }, 250);
                    }

                    // check if a message from the serial output device is valid
                    if (context.data !== undefined && context.data!=="" ) {

                        var msg = {payload: context.data}; // assign each output message to payload
                        node.send(msg); //send the message to broker
                        context.data = ""; //reset context.data
                    }
                }
            }
            //if broker is offline, store the messages to the sqlite database
            else if (brokerStatus == 'offline') {
                //insert the data to table only if context.data is not empty or undefined and broker is offline
                if (context.data != "" && context.data != undefined) {

                    console.log("if connecting store in database");
                    //prepare insert query to insert each message to database
                    var stmt = db.prepare("INSERT INTO spool_messages (message) VALUES (?)");
                    stmt.run(JSON.stringify(context.data));

                    stmt.finalize(); //data inserted

                    context.data = "";// reset context data
                }
            }
            context.set('context.stat', SpoolNode.stat); //store the status of the broker to the context
        });

        //method to delete each messages after they are sent
        function deleteMessage(message) {
            //query to delete messages based on the primary key id
            db.run("DELETE FROM spool_messages WHERE id=(?)", message.id, function (err) {
                if (err) { //if there is error in deletion, display the error
                    console.error(err);
                }
                else {
                    console.log(" delete Successful");
                    context.data=""; //reset context.data
                }
            });
        } //ends deleteMessage method
    }

    RED.nodes.registerType("spool",SpoolNode);
    RED.library.register("functions");
}
